<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="boardMapper">

  <select id="selectFreeBoardList" resultType="Board">
    <![CDATA[
      SELECT BOARD_NO, BOARD_TITLE, MEMBER_NO, CREATE_DATE, READ_COUNT, LIKE_COUNT
      FROM BOARD
      WHERE BOARD_TYPE = 'FREE'
      ORDER BY BOARD_NO DESC
    ]]>
  </select>

  <select id="getBoardCount" parameterType="String" resultType="int">
    <![CDATA[
      SELECT COUNT(*) FROM BOARD WHERE BOARD_TYPE = #{boardType}
    ]]>
  </select>

  <select id="selectBoardList" parameterType="map" resultType="Board">
    <![CDATA[
      SELECT * FROM (
        SELECT ROWNUM RNUM, A.* FROM (
          SELECT 
            B.BOARD_NO,
            B.BOARD_TITLE,
            B.CREATE_DATE,
            M.MEMBER_NICK AS MEMBER_NICK,
            NVL(R.REPLY_COUNT, 0) AS REPLY_COUNT,
            NVL(L.LIKE_COUNT, 0) AS LIKE_COUNT
          FROM BOARD B
          JOIN MEMBER M ON B.MEMBER_NO = M.MEMBER_NO
          LEFT JOIN (
            SELECT BOARD_NO, COUNT(*) AS REPLY_COUNT
            FROM REPLY
            GROUP BY BOARD_NO
          ) R ON B.BOARD_NO = R.BOARD_NO
          LEFT JOIN (
            SELECT BOARD_NO, COUNT(*) AS LIKE_COUNT
            FROM "LIKE"
            WHERE LIKE_TYPE = 'LIKE'
            GROUP BY BOARD_NO
          ) L ON B.BOARD_NO = L.BOARD_NO
          WHERE B.BOARD_TYPE = #{boardType}
          ORDER BY B.BOARD_NO DESC
        ) A
        WHERE ROWNUM <= #{endRow}
      )
      WHERE RNUM >= #{startRow}
    ]]>
  </select>

  <!-- 최근 게시글 5개 -->
  <select id="selectRecentBoards" parameterType="int" resultType="Board">
    SELECT BOARD_NO, BOARD_TITLE, CREATE_DATE
    FROM BOARD
    WHERE MEMBER_NO = #{memberNo}
      AND BOARD_ST = 'N'
    ORDER BY CREATE_DATE DESC
    FETCH FIRST 5 ROWS ONLY
  </select>

  <!-- 최근 댓글 5개 -->
  <resultMap id="recentReplyResultMap" type="Reply">
    <result property="replyNo" column="REPLY_NO" />
    <result property="replyContent" column="REPLY_CONTENT" />
    <result property="replyCreateDate" column="REPLY_CREATE_DATE" />
    <association property="board" javaType="Board">
      <result property="boardNo" column="BOARD_NO" />
      <result property="boardTitle" column="BOARD_TITLE" />
      <result property="createDate" column="BOARD_CREATE_DATE" />
    </association>
  </resultMap>

  <select id="selectRecentReplies" parameterType="int" resultMap="recentReplyResultMap">
    SELECT 
      R.REPLY_NO, R.REPLY_CONTENT, R.REPLY_CREATE_DATE,
      B.BOARD_NO, B.BOARD_TITLE, B.CREATE_DATE AS BOARD_CREATE_DATE
    FROM REPLY R
    JOIN BOARD B ON R.BOARD_NO = B.BOARD_NO
    WHERE R.MEMBER_NO = #{memberNo}
      AND R.REPLY_ST = 'N'
    ORDER BY R.REPLY_CREATE_DATE DESC
    FETCH FIRST 5 ROWS ONLY
  </select>

  <!-- 마이페이지 내가 쓴 게시글 / 댓글 -->
  <!-- 게시글 수 -->
  <select id="getMyPostCount" resultType="int">
    SELECT COUNT(*) FROM BOARD
    WHERE MEMBER_NO = #{memberNo}
      AND BOARD_ST = 'N'
  </select>

  <!-- 게시글 목록 (ROWNUM 방식) -->
  <select id="getMyPostList" resultType="Board">
    <![CDATA[
    SELECT * FROM (
      SELECT ROWNUM RNUM, TMP.* FROM (
        SELECT 
          BOARD_NO, 
          BOARD_TITLE, 
          CREATE_DATE,
          (SELECT COUNT(*) FROM REPLY WHERE BOARD_NO = B.BOARD_NO AND REPLY_ST = 'N') AS REPLY_COUNT,
          (SELECT COUNT(*) FROM "LIKE" WHERE BOARD_NO = B.BOARD_NO) AS LIKE_COUNT
        FROM BOARD B
        WHERE MEMBER_NO = #{memberNo}
          AND BOARD_ST = 'N'
        ORDER BY CREATE_DATE DESC
      ) TMP
      WHERE ROWNUM <= #{endRow}
    )
    WHERE RNUM >= #{startRow}
    ]]>
  </select>

  <!-- 댓글 수 -->
  <select id="getMyReplyCount" resultType="int">
    SELECT COUNT(*) FROM REPLY
    WHERE MEMBER_NO = #{memberNo}
      AND REPLY_ST = 'N'
  </select>

  <!-- 댓글 목록 (ROWNUM 방식) -->
  <resultMap id="myReplyResultMap" type="Reply">
    <result property="replyNo" column="REPLY_NO" />
    <result property="replyContent" column="REPLY_CONTENT" />
    <result property="replyCreateDate" column="REPLY_CREATE_DATE" />
    <association property="board" javaType="Board">
      <result property="boardNo" column="BOARD_NO" />
      <result property="boardTitle" column="BOARD_TITLE" />
      <result property="createDate" column="BOARD_CREATE_DATE" />
    </association>
  </resultMap>

  <select id="getMyReplyList" resultMap="myReplyResultMap">
    <![CDATA[
    SELECT * FROM (
      SELECT ROWNUM RNUM, TEMP.*
      FROM (
        SELECT 
          R.REPLY_NO, R.REPLY_CONTENT, R.REPLY_CREATE_DATE,
          B.BOARD_NO, B.BOARD_TITLE, B.CREATE_DATE AS BOARD_CREATE_DATE
        FROM REPLY R
        JOIN BOARD B ON R.BOARD_NO = B.BOARD_NO
        WHERE R.MEMBER_NO = #{memberNo}
          AND R.REPLY_ST = 'N'
        ORDER BY R.REPLY_CREATE_DATE DESC
      ) TEMP
      WHERE ROWNUM <= #{endRow}
    )
    WHERE RNUM >= #{startRow}
    ]]>
  </select>
  
  <!-- 게시글 상세 조회 -->
	<select id="selectBoardDetail" parameterType="int" resultType="Board">
	  SELECT B.BOARD_NO,
	         B.BOARD_TITLE,
	         B.BOARD_CONTENT,
	         B.CREATE_DATE,
	         B.UPDATE_DATE,
	         B.BOARD_ST,
	         B.BOARD_TYPE,
	         B.MLB_TEAM_NO,
	         B.KBO_TEAM_NO,
	         B.MEMBER_NO,
	         B.VIEW_COUNT,
	         M.MEMBER_NICK,
	         NVL(R.REPLY_COUNT, 0) AS REPLY_COUNT,
	         NVL(L.LIKE_COUNT, 0) AS LIKE_COUNT
	  FROM BOARD B
	  JOIN MEMBER M ON B.MEMBER_NO = M.MEMBER_NO
	  LEFT JOIN (
	      SELECT BOARD_NO, COUNT(*) AS REPLY_COUNT
	      FROM REPLY
	      GROUP BY BOARD_NO
	  ) R ON B.BOARD_NO = R.BOARD_NO
	  LEFT JOIN (
	      SELECT BOARD_NO, COUNT(*) AS LIKE_COUNT
	      FROM "LIKE"
	      GROUP BY BOARD_NO
	  ) L ON B.BOARD_NO = L.BOARD_NO
	  WHERE B.BOARD_NO = #{boardNo}
	</select>
	
	<!-- 게시글 조회수 증가 -->
	<update id="increaseViewCount" parameterType="int">
	  UPDATE BOARD
	  SET VIEW_COUNT = VIEW_COUNT + 1
	  WHERE BOARD_NO = #{boardNo}
	</update>
	
	<!-- 댓글 목록 조회 -->
	<select id="selectReplyList" parameterType="int" resultType="Reply">
	  SELECT R.REPLY_NO,
	         R.BOARD_NO,
	         R.MEMBER_NO,
	         R.REPLY_CONTENT,
	         R.REPLY_CREATE_DATE,
	         R.REPLY_UPDATE_DATE,
	         M.MEMBER_NICK
	  FROM REPLY R
	  JOIN MEMBER M ON R.MEMBER_NO = M.MEMBER_NO
	  WHERE R.BOARD_NO = #{boardNo}
	  ORDER BY R.REPLY_CREATE_DATE DESC
	</select>
  

	<!-- 좋아요 여부 확인 -->
	<select id="checkLike" parameterType="map" resultType="int">
	  SELECT COUNT(*)
	  FROM "LIKE"
	  WHERE MEMBER_NO = #{memberNo}
	    AND BOARD_NO = #{boardNo}
	    AND LIKE_TYPE = #{likeType}
	</select>
	
	<!-- 좋아요 추가 -->
	<insert id="insertLike" parameterType="map">
	  INSERT INTO "LIKE" (MEMBER_NO, BOARD_NO, LIKE_TYPE)
	  VALUES (#{memberNo}, #{boardNo}, #{likeType})
	</insert>
	
	<!-- 좋아요 삭제 -->
	<delete id="deleteLike" parameterType="map">
	  DELETE FROM "LIKE"
	  WHERE MEMBER_NO = #{memberNo}
	    AND BOARD_NO = #{boardNo}
	    AND LIKE_TYPE = #{likeType}
	</delete>
	
	<!-- 좋아요 개수 조회 -->
	<select id="getLikeCount" parameterType="int" resultType="int">
	  SELECT COUNT(*)
	  FROM "LIKE"
	  WHERE BOARD_NO = #{boardNo}
	    AND LIKE_TYPE = 'LIKE'
	</select>
  

	<!-- 댓글 작성 -->
	<insert id="insertReply" parameterType="Reply">
	  INSERT INTO REPLY (
	    REPLY_NO,
	    BOARD_NO,
	    MEMBER_NO,
	    REPLY_CONTENT,
	    REPLY_CREATE_DATE
	  ) VALUES (
	    REPLY_SEQ.NEXTVAL,
	    #{boardNo},
	    #{memberNo},
	    #{replyContent},
	    SYSDATE
	  )
	</insert>
  
 
 	<!-- 게시글 삽입 -->
	<insert id="insertBoard" parameterType="Board">
	  INSERT INTO BOARD (
	    BOARD_NO,
	    BOARD_TITLE,
	    BOARD_CONTENT,
	    CREATE_DATE,
	    BOARD_ST,
	    BOARD_TYPE,
	    MLB_TEAM_NO,
	    KBO_TEAM_NO,
	    MEMBER_NO,
	    VIEW_COUNT
	  ) VALUES (
	    BOARD_SEQ.NEXTVAL,
	    #{boardTitle},
	    #{boardContent},
	    SYSDATE,
	    'N',
	    #{boardType},
	    #{mlbTeamNo},
	    #{kboTeamNo},
	    #{memberNo},
	    0
	  )
	</insert>  
	
	
	<!-- 방금 삽입한 게시글 번호 조회 -->
	<select id="selectInsertedBoardNo" resultType="int">
	  SELECT MAX(BOARD_NO) FROM BOARD
	</select>
	
	<!-- 게시글 수정 -->
	<update id="updateBoard" parameterType="Board">
	    UPDATE BOARD
	    SET 
	        BOARD_TITLE = #{boardTitle},
	        BOARD_CONTENT = #{boardContent},
	        UPDATE_DATE = SYSDATE
	    WHERE 
	        BOARD_NO = #{boardNo}
	        AND BOARD_ST = 'N'
	</update>
  
  
  
  
  
  
  
  
  
  
  

</mapper>