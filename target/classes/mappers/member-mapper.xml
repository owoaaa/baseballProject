<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="memberMapper">
		<!--  namespace : 공간(영역, 태그)의 이름  -->
	
	<!-- mapper 파일 생성 시 아래 태그 반드시 삭제!!! -->
  	<!-- <cache-ref namespace=""/> -->
  	
  	
  	<!-- 
      resultMap  
      - SELECT 조회 결과(ResultSet) 컬럼명과
        컬럼 값을 옮겨 담을 DTO의 필드명이 같지 않을 때
        이를 매핑 시켜 SELECT시 자동으로 담기게하는 역할
    
    
       -속성
       type : 연결할 DTO (패키지명 + 클래스명 또는 별칭)
       id : 만들어진 resultMap을 지칭할 식별명(이름)
       
       <id> 태그 : PK 역할 컬럼 - 필드 매핑
       <result> 태그 : <id>제외 나머지
    -->
    
	<resultMap type="Member" id="member_rm">
   
      <!-- DB의 기본 키(복합키면 여러 개 작성) -->
      <id property="memberNo" column="MEMBER_NO" />

      <!-- DB의 일반 컬럼들 -->
      <result property="memberId" column="MEMBER_ID" />
      <result property="memberEmail" column="MEMBER_EMAIL" />
      <result property="memberPw" column="MEMBER_PW" />
      <result property="memberNick" column="MEMBER_NICK" />
      <result property="memberName" column="MEMBER_NAME" />
      <result property="memberTel" column="MEMBER_TEL" />
      <result property="memberMoney" column="MEMBER_MONEY" />
      
      <result property="memberAddress" column="MEMBER_ADDR" />
      
      <result property="profileImage" column="PROFILE_IMG" />
      <result property="enrollDate" column="ENROLL_DATE" />
      <result property="secessionFlag" column="SECESSION_FL" />
      <result property="memberPoint" column="MEMBER_POINT" />
      <result property="ratingCode" column="RATING_CD" />
      <result property="ratingName" column="RATING_NAME" />
      <result property="reportCount" column="REPORT_COUNT" />
      
      <result property="boardCount" column="BOARD_COUNT" />
      <result property="replyCount" column="REPLY_COUNT" />
      <result property="attendCount" column="ATTEND_COUNT" />
      <result property="likeCount" column="LIKE_COUNT" />
      <result property="rowNum" column="ROWNUM" />
   	</resultMap>
   
   	<resultMap type="Report" id="report_rm">
		<id property="reportNo" column="REPORT_NO" />
	
		<result property="memberNo" column="MEMBER_NO" />
		<result property="contentNo" column="CONTENT_NO" />
		<result property="contentType" column="CONTENT_TYPE" />
		<result property="reportContent" column="REPORT_CONTENT" />
		<result property="reportDate" column="REPORT_DATE" />
		<result property="reportSt" column="REPORT_ST" />
		<result property="reportTitle" column="REPORT_TITLE" />
		<result property="categoryCode" column="CATEGORY_CD" />
	</resultMap>
  	
  	
  	<!-- 
  	
  		SQL 관련 태그 속성
  		
  		- parameterType : 전달 받은 값의 자료형
  					기본 : 패키지명 + 클래스명
  					별칭 : Mybatis 별칭 또는 사용자 지정 별칭
  					
		- parameterMap : (사용 안 함) -> Ibatis 호환용  					
		
		- resultType   : select 결과를 담아서 반환할 자료형
						 단, DTO를 작성할 경우 필드명 = 컬럼명 인 경우만 가능
						 				memberNo != MEMBER_NO -> 사용 불가
		
		- resultMap    : select 결과의 컬럼명과 결과를 저장할 DTO 필드명이 다를 경우
						 이를 알맞게 매핑(연결) 시켜주는 <resultMap> id 작성
  	-->
  	
  	<!-- 
  		***** 마이바티스에서 전달 받은 값을 SQL에 작성하는 방법 *****
  		#{변수명|필드명} : PreparedStatement -> SQL 값 대입 시 양쪽에 '' 붙여서 대입
  		
  		${변수명|필드명} : Statement -> SQL에 값 대입 시 양쪽에 아무것도 붙이지 않음
  		
  	-->
  	
  	<select id="login" parameterType="Member" resultMap="member_rm">
  		SELECT MEMBER_NO, MEMBER_ID, MEMBER_EMAIL, MEMBER_NICK, MEMBER_NAME, MEMBER_PW,
			MEMBER_TEL, MEMBER_ADDR, PROFILE_IMG, MEMBER_POINT, RATING_CD, RATING_NAME,
			TO_CHAR(ENROLL_DATE, 'YYYY"년" MM"월" DD"일" HH24"시" MI"분" SS"초"') AS ENROLL_DATE 
		FROM "MEMBER"
			JOIN "RATING" USING(RATING_CD)
		WHERE SECESSION_FL = 'N'
			AND MEMBER_ID = #{memberId}
  	</select>
  	
  	<!-- DML(insert, update, delete)구문은
  		 수행 결과가 항상 성공한 행의 개수(int)로 고정이기 때문에
  		 resultType 작성하지 않는다!
  	-->
  	
  	<!-- 회원가입 --> <!-- mybatis-config.xml에 작성된 별칭 -->
  	<insert id="signUp" parameterType="Member">
  		INSERT INTO MEMBER
		VALUES(SEQ_MEMBER_NO.NEXTVAL
		, #{memberId}
		, #{memberEmail}
		, #{memberPw}
		, #{memberNick}
		, #{memberName}
		, #{memberTel}
		, #{memberAddress}
		, #{profileImage}
		, DEFAULT, DEFAULT, DEFAULT, DEFAULT)
  	</insert>	
    
    <!-- 회원 포인트 랭킹 조회 -->
    <select id="selectPointRank" resultMap="member_rm">
    	SELECT 
		    MEMBER_NO, 
		    PROFILE_IMG, 
		    MEMBER_NICK, 
		    ((SELECT COUNT(*) FROM BOARD B WHERE M.MEMBER_NO = B.MEMBER_NO AND BOARD_ST = 'N') * 100) +
		    ((SELECT COUNT(*) FROM REPLY R WHERE M.MEMBER_NO = R.MEMBER_NO AND REPLY_ST = 'N') * 10) +
		    ((SELECT COUNT(*) FROM ATTEND A WHERE M.MEMBER_NO = A.MEMBER_NO) * 100) +
		    ((SELECT COUNT(*) FROM "LIKE" L WHERE M.MEMBER_NO = L.MEMBER_NO) * 1) AS MEMBER_POINT
		FROM MEMBER M
		WHERE SECESSION_FL = 'N'
		AND MEMBER_NO != 0
		ORDER BY MEMBER_POINT DESC
    </select>
    
    <!-- 회원 신고 랭킹 조회 -->
    <select id="selectReportRank" resultMap="member_rm">
    	SELECT 
		    CASE 
		        WHEN R.CONTENT_TYPE = 'BOARD' THEN B.MEMBER_NO
		        WHEN R.CONTENT_TYPE = 'REPLY' THEN RE.MEMBER_NO
		    END AS member_no,
		    M.PROFILE_IMG,
		    M.MEMBER_NICK,
		    COUNT(DISTINCT R.REPORT_NO) AS REPORT_COUNT
		FROM 
		    REPORT R
		LEFT JOIN 
		    BOARD B ON R.CONTENT_TYPE = 'BOARD' AND R.CONTENT_NO = B.BOARD_NO
		LEFT JOIN 
		    REPLY RE ON R.CONTENT_TYPE = 'REPLY' AND R.CONTENT_NO = RE.REPLY_NO
		LEFT JOIN 
		    MEMBER M ON 
		        (R.CONTENT_TYPE = 'BOARD' AND B.MEMBER_NO = M.MEMBER_NO) 
		        OR (R.CONTENT_TYPE = 'REPLY' AND RE.MEMBER_NO = M.MEMBER_NO)
	        WHERE 
		 	M.SECESSION_FL = 'N'
		GROUP BY 
		    CASE 
		        WHEN R.CONTENT_TYPE = 'BOARD' THEN B.MEMBER_NO
		        WHEN R.CONTENT_TYPE = 'REPLY' THEN RE.MEMBER_NO
		    END,
		    M.PROFILE_IMG, 
		    M.MEMBER_NICK
		ORDER BY 
		    REPORT_COUNT DESC
    </select>
    
    <!-- 회원 탈퇴 처리 -->
    <update id="delMem">
    	UPDATE MEMBER SET SECESSION_FL = 'Y' 
    	WHERE MEMBER_NO = #{memberNo}
    </update>
    
    <!-- 차단 회원 리스트 조회 -->
    <select id="selectBanList" resultType="string">
    	SELECT TARGET_NO FROM BAN
		WHERE MEMBER_NO = #{memberNo}
    </select>
    
    <!-- 1. 아이디 찾기 -->
    <select id="findId" parameterType="Member" resultType="String">
    	SELECT MEMBER_ID FROM MEMBER
		WHERE MEMBER_NAME = #{memberName}
		AND MEMBER_EMAIL = #{memberEmail}
		AND SECESSION_FL = 'N'
    </select>
    
    <!-- 1. 비밀번호 찾기 -->
    <select id="findPw" parameterType="Member" resultType="int">
    	SELECT COUNT(*) FROM MEMBER
		WHERE MEMBER_ID = #{memberId}
		AND MEMBER_EMAIL = #{memberEmail}
		AND SECESSION_FL = 'N'
    </select>
    
    <!-- 3. 비밀번호 암호화 후 업데이트 -->
    <update id="updatePw" parameterType="Member">
    	UPDATE MEMBER SET
		MEMBER_PW = #{memberPw}
		WHERE MEMBER_ID = #{memberId}
		AND MEMBER_EMAIL = #{memberEmail}
		AND SECESSION_FL = 'N'
    </update>
    
    
    

	<!-- 추가된 포인트 정보 동기화 -->
	<select id="selectMember" parameterType="int" resultMap="member_rm">
	    SELECT * FROM MEMBER WHERE MEMBER_NO = #{memberNo}
	</select>
	  
	  
	  
	  

    <!-- 로그인회원 댕댕페이 조회 -->
    <select id="selectMemberMoney" resultType="_int">
    	SELECT NVL(SUM(ITEM_TYPE),0) MEMBER_MONEY FROM PAYMENT
		JOIN ITEM USING(ITEM_CD)
		WHERE MEMBER_NO = #{memberNo}
    </select>
  
    
    <!-- 용품 거래 신청 시/확정 시 DP 차감 -->
    <update id="decreaseBuyerDP">
    	UPDATE MEMBER
   		SET MEMBER_POINT = MEMBER_POINT - #{price}
   		WHERE MEMBER_NO = #{buyerNo}
   			AND MEMBER_POINT >= #{price}
    </update>
    
    <!-- 용품 구매 확정 시 DP 증가 -->
    <update id="increaseSellerDP">
    	UPDATE MEMBER
 			SET MEMBER_POINT = MEMBER_POINT + #{price}
   		WHERE MEMBER_NO = #{sellerNo}
    </update>
    
    <!-- 구매 취소 시 DEAL_ST == 0 이면 구매자 DP 증가 -->
    <update id="increaseBuyerDP">
    	UPDATE MEMBER
   		SET MEMBER_POINT = MEMBER_POINT + #{price}
    	WHERE MEMBER_NO = #{buyerNo}
    </update>

  	
  	<!-- Social 회원 회원가입 이메일 중복 검사 -->
  	<select id="checkEmailDuplicate" resultType="_int" parameterType="string">
	    SELECT COUNT(*) FROM MEMBER
	    WHERE MEMBER_EMAIL = #{email}
	    AND SECESSION_FL = 'N'
	</select>
  	
  	<!-- Social 회원 회원가입 닉네임 중복 검사 -->
	<select id="checkNicknameDuplicate" parameterType="string" resultType="int">
	    SELECT COUNT(*) FROM MEMBER
	    WHERE MEMBER_NICK = #{nickname}
	    AND SECESSION_FL = 'N'
	</select>
  	
  	
  	
  	<!-- Social에서 로그인한 회원의 로그인 정보 -->
	<select id="selectSocialMember" parameterType="Social" resultMap="member_rm">
	    SELECT M.*, R.RATING_NAME
	    FROM MEMBER M
	    JOIN RATING R ON M.RATING_CD = R.RATING_CD
	    WHERE M.MEMBER_NO = #{memberNo} AND M.SECESSION_FL = 'N'
	</select>
	
	<!-- Social 회원 정보 MEMBER 테이블 최신화(UPDATE) -->
	<update id="updateSocialMemberInfo" parameterType="Member">
	    UPDATE MEMBER SET
	   	 	MEMBER_EMAIL = #{memberEmail}
	        MEMBER_NICK = #{memberNick},
	        MEMBER_NAME = #{memberName},
	        MEMBER_TEL = #{memberTel},
	        PROFILE_IMG = #{profileImage}
	    WHERE MEMBER_NO = #{memberNo}
	</update>
	
	
	<!-- Social 회원 회원가입 -->
	<insert id="signUpSocialMember" parameterType="Member">
	    INSERT INTO MEMBER (
	        MEMBER_NO, MEMBER_ID, MEMBER_EMAIL, MEMBER_NICK, MEMBER_NAME, MEMBER_TEL,
	        PROFILE_IMG, ENROLL_DATE, SECESSION_FL, MEMBER_POINT, RATING_CD,	
	        MEMBER_PW, MEMBER_ADDR
	    ) VALUES (
	        SEQ_MEMBER_NO.NEXTVAL,
	        #{memberId}, #{memberEmail}, #{memberNick}, #{memberName}, #{memberTel},
	        #{profileImage}, DEFAULT, DEFAULT, DEFAULT, DEFAULT,
	        NULL, NULL
	    )
	</insert>
	
	<!-- Social 회원 회원가입 성공한 경우 INSERT(회원가입)정보를 조회 -->
	<select id="selectSignUpSocialMember" parameterType="Member" resultMap="member_rm">
	    SELECT M.*, R.RATING_NAME
	    FROM MEMBER M
	    JOIN RATING R ON M.RATING_CD = R.RATING_CD
	    WHERE M.SECESSION_FL = 'N' AND M.MEMBER_ID = #{memberId}  
	</select>
	
	<!-- 사이드바 프로필 비동기 조회 -->
	<select id="selectProfile" resultMap="member_rm">
		SELECT MEMBER_NO, PROFILE_IMG, MEMBER_NAME, MEMBER_NICK, 
					(SELECT R.RATING_NAME
					 FROM RATING R
					 WHERE M.RATING_CD = R.RATING_CD) RATING_NAME,
					 RATING_CD, MEMBER_POINT,
				 	(SELECT COUNT(*)
					 FROM BOARD
					 WHERE MEMBER_NO = #{memberNo}
					 	AND BOARD_ST = 'N') BOARD_COUNT,
					(SELECT COUNT(*)
					 FROM REPLY
					 WHERE MEMBER_NO = #{memberNo}
					 	AND REPLY_ST = 'N') REPLY_COUNT,
					(SELECT COUNT(*)
					 FROM ATTEND
					 WHERE MEMBER_NO = #{memberNo}) ATTEND_COUNT,
				  (SELECT COUNT(*)
				   FROM "LIKE"
				   WHERE MEMBER_NO = #{memberNo}) LIKE_COUNT
	 	FROM "MEMBER" M
	 	WHERE MEMBER_NO = #{memberNo}
	</select>
	
	<!-- 사이드바 랭킹 비동기 조회 -->
	<select id="selectRanking" resultMap="member_rm">
		SELECT ROWNUM, PROFILE_IMG, MEMBER_NICK, BOARD_COUNT, REPLY_COUNT, ATTEND_COUNT, LIKE_COUNT
		FROM ( SELECT PROFILE_IMG, MEMBER_NICK,
			           (SELECT COUNT(*)
			            FROM BOARD B
			            WHERE M.MEMBER_NO = B.MEMBER_NO
			            	AND BOARD_ST = 'N') AS BOARD_COUNT,
			           (SELECT COUNT(*)
			            FROM REPLY R
			            WHERE M.MEMBER_NO = R.MEMBER_NO
			            	AND REPLY_ST = 'N') AS REPLY_COUNT,
			           (SELECT COUNT(*)
			            FROM ATTEND A
			            WHERE M.MEMBER_NO = A.MEMBER_NO) AS ATTEND_COUNT,
			           (SELECT COUNT(*)
			            FROM "LIKE" L
			            WHERE M.MEMBER_NO = L.MEMBER_NO) AS LIKE_COUNT
			    FROM "MEMBER" M
			    WHERE SECESSION_FL = 'N'
					 	AND M.MEMBER_NO NOT IN (SELECT T.TARGET_NO 
															    FROM BAN T
															    WHERE T.MEMBER_NO = #{memberNo}
															  	 	AND T.TARGET_NO IS NOT NULL)
	    		<![CDATA[
			    ORDER BY (BOARD_COUNT * 100 + REPLY_COUNT * 10 + ATTEND_COUNT * 100 + LIKE_COUNT) DESC)
		WHERE ROWNUM <= 5
		]]>
	</select>
  
</mapper>
